/*
 * API Doc
 * Onedoc is an innovative API solution for developers, offering a simple and secure way to create and manage PDF documents using familiar technologies like React.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DocumentGeneratePdfFromBucketRequest;
import com.konfigthis.client.model.DocumentRenderingBucketRequest;
import com.konfigthis.client.model.DocumentRenderingBucketRequestAssetsInner;
import com.konfigthis.client.model.DocumentRenderingBucketResponse;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentApi
 */
@Disabled
public class DocumentApiTest {

    private static DocumentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DocumentApi(apiClient);
    }

    /**
     * Generates a PDF from a specified bucket.
     *
     * This route is responsible for generating a PDF from a bucket.  It expects a JSON body with details of the bucket, user credentials, and PDF generation options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePdfFromBucketTest() throws ApiException {
        String title = null;
        String bucket = null;
        String password = null;
        String username = null;
        Boolean test = null;
        Boolean save = null;
        Integer expiresIn = null;
        File response = api.generatePdfFromBucket()
                .title(title)
                .bucket(bucket)
                .password(password)
                .username(username)
                .test(test)
                .save(save)
                .expiresIn(expiresIn)
                .execute();
        // TODO: test validations
    }

    /**
     * Initiates a document&#39;s rendering
     *
     * This endpoint creates a bucket for the html and all specified assets. It returns signed urls to the buckets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renderingBucketTest() throws ApiException {
        List<DocumentRenderingBucketRequestAssetsInner> assets = null;
        DocumentRenderingBucketResponse response = api.renderingBucket()
                .assets(assets)
                .execute();
        // TODO: test validations
    }

}
