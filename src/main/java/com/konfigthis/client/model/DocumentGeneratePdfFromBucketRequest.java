/*
 * API Doc
 * Onedoc is an innovative API solution for developers, offering a simple and secure way to create and manage PDF documents using familiar technologies like React.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DocumentGeneratePdfFromBucketRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DocumentGeneratePdfFromBucketRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title = "document";

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test = true;

  public static final String SERIALIZED_NAME_SAVE = "save";
  @SerializedName(SERIALIZED_NAME_SAVE)
  private Boolean save = false;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Integer expiresIn;

  public DocumentGeneratePdfFromBucketRequest() {
  }

  public DocumentGeneratePdfFromBucketRequest title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The title of the PDF, defaults to \&quot;document\&quot;.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "document", value = "The title of the PDF, defaults to \"document\".")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public DocumentGeneratePdfFromBucketRequest bucket(String bucket) {
    
    
    
    
    this.bucket = bucket;
    return this;
  }

   /**
   * The identifier of the bucket.
   * @return bucket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The identifier of the bucket.")

  public String getBucket() {
    return bucket;
  }


  public void setBucket(String bucket) {
    
    
    
    this.bucket = bucket;
  }


  public DocumentGeneratePdfFromBucketRequest password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The password of the bucket.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password of the bucket.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public DocumentGeneratePdfFromBucketRequest username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * The username of the bucket.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The username of the bucket.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }


  public DocumentGeneratePdfFromBucketRequest test(Boolean test) {
    
    
    
    
    this.test = test;
    return this;
  }

   /**
   * Whether or not to generate a test PDF, defaults to true.
   * @return test
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether or not to generate a test PDF, defaults to true.")

  public Boolean getTest() {
    return test;
  }


  public void setTest(Boolean test) {
    
    
    
    this.test = test;
  }


  public DocumentGeneratePdfFromBucketRequest save(Boolean save) {
    
    
    
    
    this.save = save;
    return this;
  }

   /**
   * Whether or not to save the PDF to the bucket, defaults to false.
   * @return save
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether or not to save the PDF to the bucket, defaults to false.")

  public Boolean getSave() {
    return save;
  }


  public void setSave(Boolean save) {
    
    
    
    this.save = save;
  }


  public DocumentGeneratePdfFromBucketRequest expiresIn(Integer expiresIn) {
    
    
    
    
    this.expiresIn = expiresIn;
    return this;
  }

   /**
   * The expiration time of the PDF in days, default is 1 day.
   * @return expiresIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The expiration time of the PDF in days, default is 1 day.")

  public Integer getExpiresIn() {
    return expiresIn;
  }


  public void setExpiresIn(Integer expiresIn) {
    
    
    
    this.expiresIn = expiresIn;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DocumentGeneratePdfFromBucketRequest instance itself
   */
  public DocumentGeneratePdfFromBucketRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest = (DocumentGeneratePdfFromBucketRequest) o;
    return Objects.equals(this.title, documentGeneratePdfFromBucketRequest.title) &&
        Objects.equals(this.bucket, documentGeneratePdfFromBucketRequest.bucket) &&
        Objects.equals(this.password, documentGeneratePdfFromBucketRequest.password) &&
        Objects.equals(this.username, documentGeneratePdfFromBucketRequest.username) &&
        Objects.equals(this.test, documentGeneratePdfFromBucketRequest.test) &&
        Objects.equals(this.save, documentGeneratePdfFromBucketRequest.save) &&
        Objects.equals(this.expiresIn, documentGeneratePdfFromBucketRequest.expiresIn)&&
        Objects.equals(this.additionalProperties, documentGeneratePdfFromBucketRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, bucket, password, username, test, save, expiresIn, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentGeneratePdfFromBucketRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    save: ").append(toIndentedString(save)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("bucket");
    openapiFields.add("password");
    openapiFields.add("username");
    openapiFields.add("test");
    openapiFields.add("save");
    openapiFields.add("expiresIn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentGeneratePdfFromBucketRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DocumentGeneratePdfFromBucketRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentGeneratePdfFromBucketRequest is not found in the empty JSON string", DocumentGeneratePdfFromBucketRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentGeneratePdfFromBucketRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentGeneratePdfFromBucketRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentGeneratePdfFromBucketRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentGeneratePdfFromBucketRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentGeneratePdfFromBucketRequest>() {
           @Override
           public void write(JsonWriter out, DocumentGeneratePdfFromBucketRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentGeneratePdfFromBucketRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DocumentGeneratePdfFromBucketRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentGeneratePdfFromBucketRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentGeneratePdfFromBucketRequest
  * @throws IOException if the JSON string is invalid with respect to DocumentGeneratePdfFromBucketRequest
  */
  public static DocumentGeneratePdfFromBucketRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentGeneratePdfFromBucketRequest.class);
  }

 /**
  * Convert an instance of DocumentGeneratePdfFromBucketRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

