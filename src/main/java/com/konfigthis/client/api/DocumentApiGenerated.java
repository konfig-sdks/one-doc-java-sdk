/*
 * API Doc
 * Onedoc is an innovative API solution for developers, offering a simple and secure way to create and manage PDF documents using familiar technologies like React.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DocumentGeneratePdfFromBucketRequest;
import com.konfigthis.client.model.DocumentRenderingBucketRequest;
import com.konfigthis.client.model.DocumentRenderingBucketRequestAssetsInner;
import com.konfigthis.client.model.DocumentRenderingBucketResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"x-api-key\" is required but no API key was provided. Please set \"x-api-key\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generatePdfFromBucketCall(DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentGeneratePdfFromBucketRequest;

        // create path and map variables
        String localVarPath = "/api/docs/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePdfFromBucketValidateBeforeCall(DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentGeneratePdfFromBucketRequest' is set
        if (documentGeneratePdfFromBucketRequest == null) {
            throw new ApiException("Missing the required parameter 'documentGeneratePdfFromBucketRequest' when calling generatePdfFromBucket(Async)");
        }

        return generatePdfFromBucketCall(documentGeneratePdfFromBucketRequest, _callback);

    }


    private ApiResponse<File> generatePdfFromBucketWithHttpInfo(DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest) throws ApiException {
        okhttp3.Call localVarCall = generatePdfFromBucketValidateBeforeCall(documentGeneratePdfFromBucketRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePdfFromBucketAsync(DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePdfFromBucketValidateBeforeCall(documentGeneratePdfFromBucketRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePdfFromBucketRequestBuilder {
        private String title;
        private String bucket;
        private String password;
        private String username;
        private Boolean test;
        private Boolean save;
        private Integer expiresIn;

        private GeneratePdfFromBucketRequestBuilder() {
        }

        /**
         * Set title
         * @param title The title of the PDF, defaults to \\\&quot;document\\\&quot;. (optional, default to document)
         * @return GeneratePdfFromBucketRequestBuilder
         */
        public GeneratePdfFromBucketRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set bucket
         * @param bucket The identifier of the bucket. (optional)
         * @return GeneratePdfFromBucketRequestBuilder
         */
        public GeneratePdfFromBucketRequestBuilder bucket(String bucket) {
            this.bucket = bucket;
            return this;
        }
        
        /**
         * Set password
         * @param password The password of the bucket. (optional)
         * @return GeneratePdfFromBucketRequestBuilder
         */
        public GeneratePdfFromBucketRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set username
         * @param username The username of the bucket. (optional)
         * @return GeneratePdfFromBucketRequestBuilder
         */
        public GeneratePdfFromBucketRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set test
         * @param test Whether or not to generate a test PDF, defaults to true. (optional, default to true)
         * @return GeneratePdfFromBucketRequestBuilder
         */
        public GeneratePdfFromBucketRequestBuilder test(Boolean test) {
            this.test = test;
            return this;
        }
        
        /**
         * Set save
         * @param save Whether or not to save the PDF to the bucket, defaults to false. (optional, default to false)
         * @return GeneratePdfFromBucketRequestBuilder
         */
        public GeneratePdfFromBucketRequestBuilder save(Boolean save) {
            this.save = save;
            return this;
        }
        
        /**
         * Set expiresIn
         * @param expiresIn The expiration time of the PDF in days, default is 1 day. (optional)
         * @return GeneratePdfFromBucketRequestBuilder
         */
        public GeneratePdfFromBucketRequestBuilder expiresIn(Integer expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }
        
        /**
         * Build call for generatePdfFromBucket
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF generated and returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, missing or incorrect data. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bucket not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest = buildBodyParams();
            return generatePdfFromBucketCall(documentGeneratePdfFromBucketRequest, _callback);
        }

        private DocumentGeneratePdfFromBucketRequest buildBodyParams() {
            DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest = new DocumentGeneratePdfFromBucketRequest();
            documentGeneratePdfFromBucketRequest.title(this.title);
            documentGeneratePdfFromBucketRequest.bucket(this.bucket);
            documentGeneratePdfFromBucketRequest.password(this.password);
            documentGeneratePdfFromBucketRequest.username(this.username);
            documentGeneratePdfFromBucketRequest.test(this.test);
            documentGeneratePdfFromBucketRequest.save(this.save);
            documentGeneratePdfFromBucketRequest.expiresIn(this.expiresIn);
            return documentGeneratePdfFromBucketRequest;
        }

        /**
         * Execute generatePdfFromBucket request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF generated and returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, missing or incorrect data. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bucket not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest = buildBodyParams();
            ApiResponse<File> localVarResp = generatePdfFromBucketWithHttpInfo(documentGeneratePdfFromBucketRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePdfFromBucket request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF generated and returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, missing or incorrect data. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bucket not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest = buildBodyParams();
            return generatePdfFromBucketWithHttpInfo(documentGeneratePdfFromBucketRequest);
        }

        /**
         * Execute generatePdfFromBucket request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF generated and returned successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, missing or incorrect data. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Bucket not found. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            DocumentGeneratePdfFromBucketRequest documentGeneratePdfFromBucketRequest = buildBodyParams();
            return generatePdfFromBucketAsync(documentGeneratePdfFromBucketRequest, _callback);
        }
    }

    /**
     * Generates a PDF from a specified bucket.
     * This route is responsible for generating a PDF from a bucket.  It expects a JSON body with details of the bucket, user credentials, and PDF generation options.
     * @param documentGeneratePdfFromBucketRequest  (required)
     * @return GeneratePdfFromBucketRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF generated and returned successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, missing or incorrect data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bucket not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePdfFromBucketRequestBuilder generatePdfFromBucket() throws IllegalArgumentException {
        return new GeneratePdfFromBucketRequestBuilder();
    }
    private okhttp3.Call renderingBucketCall(DocumentRenderingBucketRequest documentRenderingBucketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentRenderingBucketRequest;

        // create path and map variables
        String localVarPath = "/api/docs/initiate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderingBucketValidateBeforeCall(DocumentRenderingBucketRequest documentRenderingBucketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentRenderingBucketRequest' is set
        if (documentRenderingBucketRequest == null) {
            throw new ApiException("Missing the required parameter 'documentRenderingBucketRequest' when calling renderingBucket(Async)");
        }

        return renderingBucketCall(documentRenderingBucketRequest, _callback);

    }


    private ApiResponse<DocumentRenderingBucketResponse> renderingBucketWithHttpInfo(DocumentRenderingBucketRequest documentRenderingBucketRequest) throws ApiException {
        okhttp3.Call localVarCall = renderingBucketValidateBeforeCall(documentRenderingBucketRequest, null);
        Type localVarReturnType = new TypeToken<DocumentRenderingBucketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renderingBucketAsync(DocumentRenderingBucketRequest documentRenderingBucketRequest, final ApiCallback<DocumentRenderingBucketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderingBucketValidateBeforeCall(documentRenderingBucketRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentRenderingBucketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenderingBucketRequestBuilder {
        private List<DocumentRenderingBucketRequestAssetsInner> assets;

        private RenderingBucketRequestBuilder() {
        }

        /**
         * Set assets
         * @param assets Array of assets to generate signed URLs for. (optional)
         * @return RenderingBucketRequestBuilder
         */
        public RenderingBucketRequestBuilder assets(List<DocumentRenderingBucketRequestAssetsInner> assets) {
            this.assets = assets;
            return this;
        }
        
        /**
         * Build call for renderingBucket
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully generated and returned signed URLs along with user credentials. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentRenderingBucketRequest documentRenderingBucketRequest = buildBodyParams();
            return renderingBucketCall(documentRenderingBucketRequest, _callback);
        }

        private DocumentRenderingBucketRequest buildBodyParams() {
            DocumentRenderingBucketRequest documentRenderingBucketRequest = new DocumentRenderingBucketRequest();
            documentRenderingBucketRequest.assets(this.assets);
            return documentRenderingBucketRequest;
        }

        /**
         * Execute renderingBucket request
         * @return DocumentRenderingBucketResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully generated and returned signed URLs along with user credentials. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public DocumentRenderingBucketResponse execute() throws ApiException {
            DocumentRenderingBucketRequest documentRenderingBucketRequest = buildBodyParams();
            ApiResponse<DocumentRenderingBucketResponse> localVarResp = renderingBucketWithHttpInfo(documentRenderingBucketRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renderingBucket request with HTTP info returned
         * @return ApiResponse&lt;DocumentRenderingBucketResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully generated and returned signed URLs along with user credentials. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentRenderingBucketResponse> executeWithHttpInfo() throws ApiException {
            DocumentRenderingBucketRequest documentRenderingBucketRequest = buildBodyParams();
            return renderingBucketWithHttpInfo(documentRenderingBucketRequest);
        }

        /**
         * Execute renderingBucket request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully generated and returned signed URLs along with user credentials. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentRenderingBucketResponse> _callback) throws ApiException {
            DocumentRenderingBucketRequest documentRenderingBucketRequest = buildBodyParams();
            return renderingBucketAsync(documentRenderingBucketRequest, _callback);
        }
    }

    /**
     * Initiates a document&#39;s rendering
     * This endpoint creates a bucket for the html and all specified assets. It returns signed urls to the buckets.
     * @param documentRenderingBucketRequest  (required)
     * @return RenderingBucketRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated and returned signed URLs along with user credentials. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, no API key found or invalid API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error or unable to process the request. </td><td>  -  </td></tr>
     </table>
     */
    public RenderingBucketRequestBuilder renderingBucket() throws IllegalArgumentException {
        return new RenderingBucketRequestBuilder();
    }
}
